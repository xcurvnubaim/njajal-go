// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
)

const createUsers = `-- name: CreateUsers :exec
INSERT INTO users (
    email,
    password
) VALUES (
    $1, $2
) RETURNING id, email, password, created_at, updated_at
`

type CreateUsersParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) error {
	_, err := q.db.Exec(ctx, createUsers, arg.Email, arg.Password)
	return err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, password, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetPassword = `-- name: ResetPassword :exec
UPDATE users SET password = $1 WHERE email = $2
`

type ResetPasswordParams struct {
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) ResetPassword(ctx context.Context, arg ResetPasswordParams) error {
	_, err := q.db.Exec(ctx, resetPassword, arg.Password, arg.Email)
	return err
}
